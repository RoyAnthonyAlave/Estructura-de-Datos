//4.1.1
#include <iostream>
#include <vector>
using namespace std;

void bubbleSort(vector<int>& array) {
    int n = array.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }
    }
}

int main() {
    vector<int> arr = {5, 2, 9, 1, 3, 7};
    
    bubbleSort(arr);

    cout << "Arreglo ordenado: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}



//4.1.2
#include <iostream>
#include <vector>
using namespace std;

void merge(vector<int>& arr, int left, int mid, int right) {
    vector<int> temp;
    int i = left;
    int j = mid + 1;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp.push_back(arr[i]);
            i++;
        } else {
            temp.push_back(arr[j]);
            j++;
        }
    }

    while (i <= mid) {
        temp.push_back(arr[i]);
        i++;
    }

    while (j <= right) {
        temp.push_back(arr[j]);
        j++;
    }

    for (int k = 0; k < temp.size(); k++) {
        arr[left + k] = temp[k];
    }
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;

    int mid = (left + right) / 2;

    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);

    merge(arr, left, mid, right);
}

int main() {
    vector<int> nums = {5, 2, 13, 1, 4, 10};
    mergeSort(nums, 0, nums.size() - 1);

    for (int num : nums) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}



//4.1.4
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void countingSort(vector<int>& arr) {
    int max_val = *max_element(arr.begin(), arr.end());

    vector<int> count(max_val + 1, 0);

    for (int x : arr) {
        count[x]++;
    }

    int index = 0;
    for (int i = 0; i <= max_val; i++) {
        while (count[i]--) {
            arr[index++] = i;
        }
    }
}

int main() {
    vector<int> arr = {4, 2, 2, 8, 3, 3, 1};

    countingSort(arr);

    cout << "Arreglo ordenado: ";
    for (int x : arr) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}



//4.1.5
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<int> arr = {4, 2, 7, 1, 3};
    sort(arr.begin(), arr.end());

    for (int x : arr) cout << x << " ";
    cout << endl;
    return 0;
}



//4.2.1
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<pair<int, int>> intervals = {{1, 5}, {2, 6}, {4, 8}, {7, 9}};
    vector<pair<int, int>> events;

    for (const auto& interval : intervals) {
        int start = interval.first;
        int end = interval.second;
        events.push_back({start, +1}); 
        events.push_back({end, -1}); 
    }

    sort(events.begin(), events.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        return (a.first < b.first) || (a.first == b.first && a.second > b.second);
    });

    int current = 0, max_overlap = 0;
    for (const auto& event : events) {
        int time = event.first;
        int type = event.second;
        current += type;
        max_overlap = max(max_overlap, current);
    }

    cout << "Máximo número de intervalos activos al mismo tiempo: " << max_overlap << endl;
    return 0;
}



//4.2.2
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<pair<int, int>> events = {{1, 3}, {2, 5}, {4, 6}, {6, 7}, {5, 8}, {8, 9}};

    sort(events.begin(), events.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        return a.second < b.second;
    });

    int count = 0;
    int last_end = 0;

    for (const auto& event : events) {
        int start = event.first;
        int end = event.second;
        if (start >= last_end) {
            count++;
            last_end = end;
        }
    }

    cout << "Máximo número de eventos sin solaparse: " << count << endl;
    return 0;
}



4.2.3
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    vector<pair<int, int>> tasks = {{3, 5}, {2, 8}, {1, 4}, {5, 10}};

    sort(tasks.begin(), tasks.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        return a.second < b.second;
    });

    long long time = 0;
    long long penalty = 0;

    for (const auto& task : tasks) {
        int t = task.first;
        int d = task.second;
        time += t;
        penalty += (time - d);
    }

    cout << "Penalización total: " << penalty << endl;
    return 0;
}



//4.3.1
#include <iostream>
#include <vector>
using namespace std;

bool binarySearch(const vector<int>& a, int x) {
    int l = 0, r = a.size() - 1;

    while (l <= r) {
        int m = (l + r) / 2;
        if (a[m] == x) return true;
        else if (a[m] < x) l = m + 1;
        else r = m - 1;
    }
    return false;
}

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    int x = 7;

    if (binarySearch(arr, x)) cout << "Sí está en el arreglo\n";
    else cout << "No está en el arreglo\n";

    return 0;
}



//4.3.2
#include <iostream>
#include <vector>
using namespace std;

bool check(const vector<int>& a, int k, int x) {
    int parts = 1, sum = 0;
    for (int num : a) {
        if (num > x) return false;
        if (sum + num > x) {
            parts++;
            sum = num;
        } else {
            sum += num;
        }
    }
    return parts <= k;
}

int findMinMaxSum(const vector<int>& a, int k) {
    int l = 0, r = 1e9, ans = -1;
    while (l <= r) {
        int m = (l + r) / 2;
        if (check(a, k, m)) {
            ans = m;
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return ans;
}

int main() {
    vector<int> a = {7, 2, 5, 10, 8};
    int k = 2;

    cout << "Mínima suma máxima por segmento: " << findMinMaxSum(a, k) << endl;
    return 0;
}

