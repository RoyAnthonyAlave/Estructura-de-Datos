// C2:p1 2.1.1
#include <bits/stdc++.h>
using namespace std;
int main(){
    int a, b;
    int c,d;
    string m;
    string x;
    cin >> a >> b>> x;
    cout << a<<" "<< b<<" "<<x<<endl;

    scanf("%d %d", &c, &d);
    printf("%d %d\n", c, d);

    getline(cin , m);
    cout << m;

    string p;
    while(cin >> p){
        cout << p << "\n";
    }
    return 0;
}




// C2: P2 2.1.2
#include <bits/stdc++.h>
using namespace std;
int main(){
    int a = 123456;
    long long b = a*a;
    cout << b << "\n";

    //
    int m,n;
    cin >> n >>m;
    long long x = 1;
    for(int i=1; i<=n; i++){
        x = (x*i)%m;
    }
    cout<< x<< "\n";
    //
    double o, l;
    cin >> o>>l;
    if(abs(o-l)< 1e-9){
        cout << "Iguales\n";
    }else{
        cout << "Diferentes\n";
    }
    return 0;
}



// C2:P3 2.1.3
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pi;

#define F first
#define S second
#define PB push_back
#define MP make_pair
#define REP(i,a,b) for (int i = a; i <= b; i++)

int main() {
    ll a = 123456789, b = 987654321;
    cout << a * b << "\n";

    vi v;
    v.PB(1);
    v.PB(2);
    cout << v[0] << " " << v[1] << "\n";

    return 0;
}



//2.2.1
#include <bits/stdc++.h>
using namespace std;

int n;
vector<int> subset;

void search(int k) {
    if (k == n + 1) {
        // Procesar el subconjunto
        cout << "{";
        for (size_t i = 0; i < subset.size(); i++) {
            cout << subset[i] << (i + 1 < subset.size() ? ", " : "");
        }
        cout << "}\n";
    } else {
        subset.push_back(k);
        search(k + 1);
        subset.pop_back();
        search(k + 1);
    }
}

int main() {
    cin >> n;
    search(1);
    return 0;
}



//C2:P3 2.2.2
#include <bits/stdc++.h>
using namespace std;

int n;
vector<int> permutation;
vector<bool> chosen;

void search() {
    if (permutation.size() == n) {
        for (int x : permutation) cout << x << " ";
        cout << "\n";
    } else {
        for (int i = 1; i <= n; i++) {
            if (chosen[i]) continue;
            chosen[i] = true;
            permutation.push_back(i);
            search();
            chosen[i] = false;
            permutation.pop_back();
        }
    }
}

int main() {
    cin >> n;
    chosen.assign(n + 1, false);
    search();
    return 0;
}



//C2:P3 2.2.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> permutation;
    for (int i = 1; i <= n; i++) {
        permutation.push_back(i);
    }
    do {
        for (int x : permutation) cout << x << " ";
        cout << "\n";
    } while (next_permutation(permutation.begin(), permutation.end()));
    return 0;
}



//2.2.3
#include <bits/stdc++.h>
using namespace std;

int n, count_solutions = 0;
vector<int> col, diag1, diag2;

void search(int y) {
    if (y == n) {
        count_solutions++;
        return;
    }
    for (int x = 0; x < n; x++) {
        if (col[x] || diag1[x + y] || diag2[x - y + n - 1]) continue;
        col[x] = diag1[x + y] = diag2[x - y + n - 1] = 1;
        search(y + 1);
        col[x] = diag1[x + y] = diag2[x - y + n - 1] = 0;
    }
}

int main() {
    cin >> n;
    col.assign(n, 0);
    diag1.assign(2 * n - 1, 0);
    diag2.assign(2 * n - 1, 0);
    search(0);
    cout << count_solutions << "\n";
    return 0;
}



//2.3
#include <bits/stdc++.h>
using namespace std;

int main() {
    int x = -43;
    unsigned int y = x;
    cout << x << "\n"; // -43
    cout << y << "\n"; // 4294967253 (en sistemas de 32 bits)
    return 0;
}



//C2:P3 2.3
#include <bits/stdc++.h>
using namespace std;

int main() {
    int x = 2147483647;
    cout << x << "\n"; // 2147483647
    x++;
    cout << x << "\n"; // -2147483648 (overflow)
    return 0;
}



// C2:P3 2.3.1
#include <bits/stdc++.h>
using namespace std;

int main() {
    int x = 5328; // 00000000000000000001010011010000

    // Imprimir la representación binaria de x, 32 bits
    for (int k = 31; k >= 0; k--) {
        if (x & (1 << k)) cout << "1";
        else cout << "0";
    }
    cout << "\n";

    return 0;
}



//C2:P3 2.3.1
#include <bits/stdc++.h>
using namespace std;

int main() {
    int x = 5328; // 00000000000000000001010011010000

    cout << __builtin_clz(x) << "\n";      // 19: ceros a la izquierda
    cout << __builtin_ctz(x) << "\n";      // 4: ceros a la derecha
    cout << __builtin_popcount(x) << "\n"; // 5: número de bits en 1
    cout << __builtin_parity(x) << "\n";   // 1: paridad (1 si impar número de bits en 1)

    return 0;
}



//C2:P3 2.3.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    int x = 0;
    x |= (1 << 1); // Agrega el elemento 1
    x |= (1 << 3); // Agrega el elemento 3
    x |= (1 << 4); // Agrega el elemento 4
    x |= (1 << 8); // Agrega el elemento 8

    cout << __builtin_popcount(x) << "\n"; // Imprime el tamaño del conjunto (4)

    // Imprime los elementos que están en el conjunto
    for (int i = 0; i < 32; i++) {
        if (x & (1 << i))
            cout << i << " ";
    }
    cout << "\n"; // Salida: 1 3 4 8

    return 0;
}



//C2:P3 2.3.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    // x = {1, 3, 4, 8}
    int x = (1 << 1) | (1 << 3) | (1 << 4) | (1 << 8);
    // y = {3, 6, 8, 9}
    int y = (1 << 3) | (1 << 6) | (1 << 8) | (1 << 9);

    // Unión: z = x ∪ y = {1, 3, 4, 6, 8, 9}
    int z = x | y;
    cout << __builtin_popcount(z) << "\n"; // 6

    // Intersección: x ∩ y
    int inter = x & y;
    cout << "Interseccion: ";
    for (int i = 0; i < 32; i++) {
        if (inter & (1 << i)) cout << i << " ";
    }
    cout << "\n";

    // Diferencia: x \ y
    int diff = x & (~y);
    cout << "Diferencia (x \\ y): ";
    for (int i = 0; i < 32; i++) {
        if (diff & (1 << i)) cout << i << " ";
    }
    cout << "\n";

    // Complemento de x (los elementos que NO están en x)
    int comp = ~x;
    cout << "Complemento de x (primeros 10 bits): ";
    for (int i = 0; i < 10; i++) {
        if (comp & (1 << i)) cout << i << " ";
    }
    cout << "\n";

    return 0;
}



//C2:P3 2.3.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    for (int b = 0; b < (1 << n); b++) {
        cout << "Subconjunto: ";
        for (int i = 0; i < n; i++) {
            if (b & (1 << i)) cout << i << " ";
        }
        cout << "\n";
    }
    return 0;
}



//C2:P3 2.3.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    // x = {1, 3, 4, 8}
    int x = (1 << 1) | (1 << 3) | (1 << 4) | (1 << 8);
    int b = 0;
    do {
        cout << "Subconjunto: ";
        for (int i = 0; i < 32; i++) {
            if (b & (1 << i)) cout << i << " ";
        }
        cout << "\n";
    } while (b = (b - x) & x);
    return 0;
}



//C2:P3 final 2.3.2
#include <bits/stdc++.h>
using namespace std;

int main() {
    bitset<10> s;
    s[1] = 1;
    s[3] = 1;
    s[4] = 1;
    s[7] = 1;

    cout << s[4] << "\n"; // 1
    cout << s[5] << "\n"; // 0
    cout << s.count() << "\n"; // 4

    // Operaciones con bitsets
    bitset<10> a, b;
    a[1] = 1; a[2] = 1; a[5] = 1;
    b[2] = 1; b[3] = 1; b[5] = 1;

    bitset<10> c = a & b; // Intersección
    bitset<10> d = a | b; // Unión
    bitset<10> e = a ^ b; // Diferencia simétrica

    cout << "a: " << a << "\n";
    cout << "b: " << b << "\n";
    cout << "a & b: " << c << "\n";
    cout << "a | b: " << d << "\n";
    cout << "a ^ b: " << e << "\n";

    return 0;
}
